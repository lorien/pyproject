[project]
name = "{{ cookiecutter.project_name }}"
version = "0.0.1"
{% if cookiecutter.packaging == "yes" %}
description = ""
readme = "README.md"
requires-python = ">={{ cookiecutter.min_python_version }}"
license = {"file" = "LICENSE"}
keywords = []
authors = [
    {name = "{{ cookiecutter.author_name }}"{% if cookiecutter.author_email %}, email = "{{ cookiecutter.author_email }}"{% endif %}}
]
# https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
    "Private :: Do Not Upload", # https://pypi.org/classifiers/
]
dependencies = []

[project.urls]
{% endif %}
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["{{ cookiecutter.project_name }}"]

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.isort]
profile = "black"
line_length = 88
# skip_gitignore = true # throws errors in stderr when ".git" dir does not exist

#[[tool.mypy.overrides]]
#module = "procstat"
#ignore_missing_imports = true

[tool.pylint.main]
jobs=4
extension-pkg-whitelist="lxml"
disable="missing-docstring,broad-except,too-few-public-methods,consider-using-f-string,fixme"
variable-rgx="[a-z_][a-z0-9_]{1,30}$"
attr-rgx="[a-z_][a-z0-9_]{1,30}$"
argument-rgx="[a-z_][a-z0-9_]{1,30}$"
max-line-length=88
max-args=9
load-plugins=[
    "pylint.extensions.check_elif",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.docstyle",
    "pylint.extensions.emptystring",
    "pylint.extensions.for_any_all",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
]


[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
select = ["ALL"]
ignore = [
    "A003", # Class attribute `type` is shadowing a python builtin
    "ANN101", # Missing type annotation for `self` in method
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "BLE001", # Do not catch blind exception: `Exception`
    "COM812", # Trailing comma missing
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method1
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method,
    "D107", # Missing docstring in `__init__`
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "EM101", # Check for raw usage of a string literal in Exception raising
    "EM102", # Check for raw usage of an f-string literal in Exception raising
    "EM103", # Check for raw usage of .format on a string literal in Exception raising
    "F401", # Imported but unused
    "FBT", # Boolean arg/value in function definition
    "PTH", # A plugin finding use of functions that can be replaced by pathlib module
    "S101", # Use of `assert` detected
    "T201", # print found	
    "T203", # pprint found
    "TCH", # Move import into a type-checking block
    "TRY003", # Avoid specifying long messages outside the exception class
    "UP032", # Use f-string instead of format call
    "ERA001", # Found commented-out code
]
target-version = "py{{ cookiecutter.target_python_version|replace(".", "") }}"
extend-exclude = ["var"]
